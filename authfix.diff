diff -ur pygooglevoice-0.5/bin/asterisk-gvoice-setup authfix/bin/asterisk-gvoice-setup
--- pygooglevoice-0.5/bin/asterisk-gvoice-setup	2009-08-31 13:23:43.000000000 -0400
+++ authfix/bin/asterisk-gvoice-setup	2012-03-03 17:56:16.918931346 -0500
@@ -66,6 +66,7 @@
 exten => _X.,n,System(gvoice -b -e \${ACCTNAME} -p \${ACCTPASS} call \${EXTEN} \${RINGBACK})
 exten => _X.,n,Set(PARKINGEXTEN=\${CALLPARK})
 exten => _X.,n,Park()
+exten => _X.,n,ParkAndAnnounce(pbx-transfer:PARKED|45|Console/dsp)
 
 [custom-park]
 exten => s,1,Wait(4)
diff -ur pygooglevoice-0.5/bin/gvoice authfix/bin/gvoice
--- pygooglevoice-0.5/bin/gvoice	2009-11-29 11:20:16.000000000 -0500
+++ authfix/bin/gvoice	2012-03-03 17:56:16.918931346 -0500
@@ -47,11 +47,11 @@
     global voice
     try:
         voice.login(options.email,options.passwd)
-    except LoginError:
+    except (LoginError), e:
         if batch:
-            print_('Login failed.')
+            print_('Login failed: %s' % str(e))
             exit(0)
-        if input('Login failed. Retry?[Y/n] ').lower() in ('', 'y'):
+        if input('Login failed: \'%s\', Retry?[Y/n] ' % str(e)).lower() in ('', 'y'):
             login(None, None, batch)
         else:
             exit(0)
@@ -126,4 +126,4 @@
             print_('Please provide a message')
             exit(0)
         args = (num, ' '.join(args))
-    getattr(voice,action)(*args)
\ No newline at end of file
+    getattr(voice,action)(*args)
Only in authfix: docs
Only in authfix: examples
diff -ur pygooglevoice-0.5/googlevoice/settings.py authfix/googlevoice/settings.py
--- pygooglevoice-0.5/googlevoice/settings.py	2009-12-07 12:18:15.000000000 -0500
+++ authfix/googlevoice/settings.py	2012-03-03 17:56:16.925598117 -0500
@@ -19,7 +19,8 @@
 """
 
 DEBUG = False
-LOGIN = 'https://www.google.com/accounts/ServiceLoginAuth?service=grandcentral'
+LOGIN = 'https://www.google.com/accounts/ClientLogin'
+SERVICE = 'grandcentral'
 FEEDS = ('inbox', 'starred', 'all', 'spam', 'trash', 'voicemail', 'sms',
         'recorded', 'placed', 'received', 'missed')
 
@@ -50,4 +51,4 @@
 XML_RECORDED = XML_RECENT + 'recorded/'
 XML_PLACED = XML_RECENT + 'placed/'
 XML_RECEIVED = XML_RECENT + 'received/'
-XML_MISSED = XML_RECENT + 'missed/'
\ No newline at end of file
+XML_MISSED = XML_RECENT + 'missed/'
diff -ur pygooglevoice-0.5/googlevoice/util.py authfix/googlevoice/util.py
--- pygooglevoice-0.5/googlevoice/util.py	2009-12-11 07:52:39.000000000 -0500
+++ authfix/googlevoice/util.py	2012-03-03 17:56:16.925598117 -0500
@@ -6,11 +6,11 @@
 from pprint import pprint
 try:
     from urllib2 import build_opener,install_opener, \
-        HTTPCookieProcessor,Request,urlopen
+        HTTPCookieProcessor,Request,urlopen,HTTPError
     from urllib import urlencode,quote
 except ImportError:
     from urllib.request import build_opener,install_opener, \
-        HTTPCookieProcessor,Request,urlopen
+        HTTPCookieProcessor,Request,urlopen,HTTPError
     from urllib.parse import urlencode,quote
 try:
     from http.cookiejar import LWPCookieJar as CookieJar
diff -ur pygooglevoice-0.5/googlevoice/voice.py authfix/googlevoice/voice.py
--- pygooglevoice-0.5/googlevoice/voice.py	2009-12-07 09:24:28.000000000 -0500
+++ authfix/googlevoice/voice.py	2012-03-03 17:56:16.925598117 -0500
@@ -39,7 +39,8 @@
         except NameError:
             regex = r"('_rnr_se':) '(.+)'"
         try:
-            sp = re.search(regex, urlopen(settings.INBOX).read()).group(2)
+            response = self.__do_page('inbox', data=None, headers = {'Authorization': 'GoogleLogin auth=%s' % self._auth })
+            sp = re.search(regex, response.read()).group(2)
         except AttributeError:
             sp = None
         self._special = sp
@@ -65,12 +66,19 @@
             from getpass import getpass
             passwd = getpass()
 
-        content = self.__do_page('login').read()
-        # holy hackjob
-        galx = re.search(r"name=\"GALX\"\s+value=\"(.+)\"", content).group(1)
-        self.__do_page('login', {'Email': email, 'Passwd': passwd, 'GALX': galx})
-        
-        del email, passwd
+        response = self.__do_page('login', {'accountType': 'HOSTED_OR_GOOGLE' ,'Email': email, 'Passwd': passwd, 'service': 'grandcentral' })
+
+        respMap = dict( line.strip().split('=', 1) for line in response.readlines() )
+        response.close()
+
+        if respMap.has_key('Auth'):
+            self._auth = respMap['Auth']
+        elif respMap.has_key('Error'):
+            if respMap['Error'] == 'CaptchaRequired':
+                raise LoginError('Clear the captcha at: %s' % respMap['Url'])
+            raise LoginError(respMap['Error'])
+
+        del email, passwd, respMap
         
         try:
             assert self.special
@@ -84,7 +92,10 @@
         Logs out an instance and makes sure it does not still have a session
         """
         self.__do_page('logout')
-        del self._special 
+        if hasattr(self,"_auth"):
+            del self._auth
+        if self.special != None:
+            del self._special
         assert self.special == None
         return self
         
@@ -200,7 +211,11 @@
             return urlopen(Request(getattr(settings, page) + data, None, headers))
         if data:
             headers.update({'Content-type': 'application/x-www-form-urlencoded;charset=utf-8'})
-        return urlopen(Request(getattr(settings, page), data, headers))
+            headers.update({'Content-length': '%d' % len(data)})
+        try:
+            return urlopen(Request(getattr(settings, page), data, headers))
+        except (HTTPError), e:
+            return e
 
     def __validate_special_page(self, page, data={}, **kwargs):
         """
@@ -215,11 +230,14 @@
         """
         Add self.special to request data
         """
-        assert self.special, 'You must login before using this page'
+        assert self.special and self._auth, 'You must login before using this page'
         if isinstance(data, tuple):
             data += ('_rnr_se', self.special)
         elif isinstance(data, dict):
             data.update({'_rnr_se': self.special})
+
+        headers.update({'Authorization': 'GoogleLogin auth=%s' % self._auth})
+
         return self.__do_page(page, data, headers)
         
     _Phone__do_special_page = __do_special_page
Only in authfix: .hg
Only in authfix: LICENSE.txt
Only in pygooglevoice-0.5: PKG-INFO
Only in authfix: README.rst
